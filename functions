#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

reload_nginx () {
  case "$DOKKU_DISTRO" in
    ubuntu)
      sudo /etc/init.d/nginx reload > /dev/null
      ;;

    opensuse)
      sudo /sbin/service nginx reload > /dev/null
      ;;
  esac
}

letsencrypt_acmeproxy_on () {
  dokku_log_info1 "Enabling ACME proxy for $APP..."

  if [[ ! -d "$APP_ROOT/nginx.conf.d" ]]; then
    mkdir "$APP_ROOT/nginx.conf.d"
  fi

  rm -f "$APP_ROOT/nginx.conf.d/letsencrypt.conf"
  cp "$(dirname "$0")/templates/letsencrypt.conf" "$APP_ROOT/nginx.conf.d"
  sed -i "s,{ACMEPORT},$ACMEPORT," "$APP_ROOT/nginx.conf.d/letsencrypt.conf"

  reload_nginx
}

letsencrypt_acmeproxy_off() {
  dokku_log_info1 "Disabling ACME proxy for $APP..."

  if [[ -f "$APP_ROOT/nginx.conf.d/letsencrypt.conf" ]]; then
    rm "$APP_ROOT/nginx.conf.d/letsencrypt.conf"
  fi

  reload_nginx
}

letsencrypt_update () {
  dokku_log_info1 "Updating letsencrypt docker image..."
  docker pull m3adow/letsencrypt-simp_le:latest
  dokku_log_verbose "done"
}

letsencrypt_link () {
  dokku_log_info1 "Symlinking let's encrypt certificates"
  mkdir -p "$APP_SSL_ROOT"
  ln -nsf "$LETSENCRYPT_ROOT/key.pem" "$APP_SSL_ROOT/server.key"
  ln -nsf "$LETSENCRYPT_ROOT/fullchain.pem" "$APP_SSL_ROOT/server.crt"
}

letsencrypt_create_root () {
  # Set up folders
  if [ ! -d "$LETSENCRYPT_ROOT" ]; then
    mkdir -p "$LETSENCRYPT_ROOT"
  fi
}

letsencrypt_get_server() {
  # only cat if file exists
  [ ! -f "$LETSENCRYPT_SERVERFILE" ] || cat $LETSENCRYPT_SERVERFILE
}

letsencrypt_set_server() {
  LETSENCRYPT_SERVER="${1,,}"

  if [ "$LETSENCRYPT_SERVER" == "default" ]; then
    LETSENCRYPT_SERVER=""
  elif [ "$LETSENCRYPT_SERVER" == "staging" ]; then
    LETSENCRYPT_SERVER="https://acme-staging.api.letsencrypt.org/directory"
  fi

  if [ -z "$LETSENCRYPT_SERVER" ]; then
    dokku_log_info2 "Setting Let's Encrypt Server for $APP to default"
    rm -f $LETSENCRYPT_SERVERFILE
  else
    dokku_log_info2 "Setting Let's Encrypt Server for $APP to '$LETSENCRYPT_SERVER'"
    echo $LETSENCRYPT_SERVER > $LETSENCRYPT_SERVERFILE
  fi
}

letsencrypt_get_email() {
  # only cat if file exists
  [ ! -f "$LETSENCRYPT_EMAILFILE" ] || cat $LETSENCRYPT_EMAILFILE
}

letsencrypt_set_email() {
  LETSENCRYPT_EMAIL="${1}"
  if [ -z "$LETSENCRYPT_EMAIL" ]; then
    dokku_log_info2 "Removing Let's Encrypt e-mail information for $APP"
    rm -f $LETSENCRYPT_EMAILFILE
  else
    dokku_log_info2 "Setting Let's Encrypt e-mail address for $APP to '$LETSENCRYPT_EMAIL'"
    echo $LETSENCRYPT_EMAIL > $LETSENCRYPT_EMAILFILE
  fi
}

letsencrypt_acme () {
  letsencrypt_create_root

  # check we have a valid e-mail address
  LETSENCRYPT_EMAIL=$(letsencrypt_get_email)
  if [ -z "$LETSENCRYPT_EMAIL" ]; then
    dokku_log_warn "ERROR: Cannot request a certificate without an e-mail address!"
    dokku_log_warn "  please provide your e-mail address using"
    dokku_log_warn "  dokku letsencrypt:email $APP <e-mail>"
    return 1
  fi

  # get the selected ACME server
  LETSENCRYPT_SERVER=$(letsencrypt_get_server)
  if [ ! -z "$LETSENCRYPT_SERVER" ]; then
    LETSENCRYPT_SERVER="--server $LETSENCRYPT_SERVER"
  fi

  dokku_log_info1 "Getting letsencrypt certificate for $APP..."

  # construct domain arguments
  DOMAINS=$(dokku urls "$APP" | sed "s,\\s,\n,g" | sed -re "s,https?://,," | sed -re "s,\\*\\.,," | uniq | xargs)
  DOMAIN_ARGS=''
  for DOMAIN in $DOMAINS; do
    dokku_log_verbose " - Domain '$DOMAIN'"
    DOMAIN_ARGS="$DOMAIN_ARGS -d $DOMAIN"
  done

  # run letsencrypt as a docker container using "certonly" mode
  # port 80 of the standalone webserver will be forwarded by the proxy
  set +e
  docker run --rm \
    -p $ACMEPORT:80 \
    -v "$LETSENCRYPT_ROOT:/certs" \
    m3adow/letsencrypt-simp_le:latest \
    -f account_key.json \
    -f fullchain.pem -f chain.pem -f cert.pem -f key.pem \
    $LETSENCRYPT_SERVER \
    --email $LETSENCRYPT_EMAIL \
    $DOMAIN_ARGS

  SIMPLE_RESULT=$?
  set -e

  # handle simp_le return codes
  # see https://github.com/kuba/simp_le/blob/master/README.rst#manifest
  if [[ $SIMPLE_RESULT == 0 ]]; then
    # got certificate
    dokku_log_info1 "Certificate retrieved successfully."

  elif [[ $SIMPLE_RESULT == 1 ]]; then
    # no renewal necessary
    dokku_log_info1 "No renewal necessary"

  else
    # error - don't try to link certificates
    dokku_log_info1 "Certificate retrieval failed!"
    return

  fi

  letsencrypt_link
  nginx_build_config "$APP"
}
