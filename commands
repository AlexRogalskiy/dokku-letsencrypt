#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

PLUGIN_BASE_PATH="$PLUGIN_PATH"
if [[ -n $DOKKU_API_VERSION ]]; then
  PLUGIN_BASE_PATH="$PLUGIN_ENABLED_PATH"
fi

source "$PLUGIN_BASE_PATH/letsencrypt/functions"
source "$PLUGIN_BASE_PATH/nginx-vhosts/functions"
source "$PLUGIN_BASE_PATH/certs/functions"
source "$PLUGIN_BASE_PATH/common/functions"

if [[ $1 == letsencrypt || $1 == letsencrypt:* ]]; then

  if [[ ! -z $2 ]]; then
    verify_app_name "$2"
    APP="$2"
    APP_ROOT="$DOKKU_ROOT/$APP"
    APP_SSL_ROOT="$DOKKU_ROOT/$APP/tls"
    LETSENCRYPT_ROOT="$APP_ROOT/letsencrypt"

    # by default, renew 30 days before expiry
    LETSENCRYPT_RENEWBEFORE_DEFAULT=$((30 * 24 * 60 * 60));
  fi

fi

case "$1" in
  letsencrypt)
    [[ -z $APP ]] && echo "Please specify an app to run the command on" && exit 1

    dokku_log_info2 "Let's Encrypt $APP..."

    # dynamically choose a port for the letsencrypt standalone authenticator
    ACMEPORT=$(get_available_port)

    letsencrypt_check_email

    letsencrypt_update
    letsencrypt_acmeproxy_on
    letsencrypt_acme || true    # remove ACME proxy even if this fails
    letsencrypt_acmeproxy_off

    dokku_log_verbose "done"

    ;;

  letsencrypt:revoke)
    [[ -z $APP ]] && echo "Please specify an app to run the command on" && exit 1

    dokku_log_info2 "Revoke Let's Encrypt certificate from $APP..."

    letsencrypt_check_email
    letsencrypt_update
    letsencrypt_acme_revoke || true

    dokku_log_verbose "done"
    ;;

  letsencrypt:server)
    [[ -z $APP ]] && echo "Please specify an app to run the command on" && exit 1

    letsencrypt_create_root

    if [[ -z "$3" ]]; then
      LETSENCRYPT_SERVER=$(letsencrypt_get server)

      if [ -z "$LETSENCRYPT_SERVER" ]; then
        dokku_log_verbose "Let's Encrypt server for $APP is default"
      else
        dokku_log_verbose "Let's Encrypt server for $APP is '$LETSENCRYPT_SERVER'"
      fi

    else

      LETSENCRYPT_SERVER="$3"
      if [ "$LETSENCRYPT_SERVER" == "default" ]; then
        LETSENCRYPT_SERVER=""
      elif [ "$LETSENCRYPT_SERVER" == "staging" ]; then
        LETSENCRYPT_SERVER="https://acme-staging.api.letsencrypt.org/directory"
      fi

      dokku_log_info2 "Setting Let's Encrypt Server for $APP to '$LETSENCRYPT_SERVER'"
      letsencrypt_set server $LETSENCRYPT_SERVER
    fi

    ;;

  letsencrypt:email)
    [[ -z $APP ]] && echo "Please specify an app to run the command on" && exit 1

    letsencrypt_create_root

    if [[ -z "$3" ]]; then
      LETSENCRYPT_EMAIL=$(letsencrypt_get email)

      if [ -z "$LETSENCRYPT_EMAIL" ]; then
        dokku_log_verbose "Let's Encrypt e-mail for $APP is not set"
        dokku_log_verbose "  to set, use dokku letsencrypt:email $APP <email>"
      else
        dokku_log_verbose "Let's Encrypt e-mail for $APP is '$LETSENCRYPT_EMAIL'"
      fi

    else

      LETSENCRYPT_EMAIL="$3"
      dokku_log_info2 "Setting Let's Encrypt e-mail address for $APP to '$LETSENCRYPT_EMAIL'"
      letsencrypt_set email $LETSENCRYPT_EMAIL
    fi

    ;;

  letsencrypt:renew-before)
    [[ -z $APP ]] && echo "Please specify an app to run the command on" && exit 1

    letsencrypt_create_root

    if [[ -z "$3" ]]; then
      LETSENCRYPT_RENEWBEFORE=$(letsencrypt_get renew_before $LETSENCRYPT_RENEWBEFORE_DEFAULT)
      LETSENCRYPT_RENEWBEFORE_HUMAN=$(letsencrypt_format_timediff $LETSENCRYPT_RENEWBEFORE);
      dokku_log_verbose "Will renew certificates for $APP $LETSENCRYPT_RENEWBEFORE_HUMAN before expiry"
    else
      LETSENCRYPT_RENEWBEFORE="$3"

    dokku_log_verbose "'$LETSENCRYPT_RENEWBEFORE'"

      RE_NUMBER='^[0-9]+$'
      if [[ ! $LETSENCRYPT_RENEWBEFORE =~ $RE_NUMBER ]]; then
        dokku_log_warn "Need a numeric input"
        exit 1
      fi

      if [[ $LETSENCRYPT_RENEWBEFORE == 0 ]]; then
        dokku_log_info2 "Restoring default renewal schedule for $APP"
        letsencrypt_set renew_before ""
      else
        LETSENCRYPT_RENEWBEFORE_HUMAN=$(letsencrypt_format_timediff $LETSENCRYPT_RENEWBEFORE);
        dokku_log_info2 "Setting time before let's encrypt certificate renewal to $LETSENCRYPT_RENEWBEFORE_HUMAN"
        letsencrypt_set renew_before $LETSENCRYPT_RENEWBEFORE
      fi

    fi
    ;;

  letsencrypt:ls)

    dokku_col_log_info1_quiet "App name" "Certificate Expiry" "Time left"

    for app in $( dokku_apps ); do
      if [[ $(letsencrypt_is_active $app) -eq $app ]]; then
        expiry=$(letsencrypt_get_expirydate $app)
        echo -e "$app\t$expiry"
      fi
    done | sort -nk2 |

    while IFS=$'\t' read -r -a appExpiry; do
      expire_date=$(date -d @${appExpiry[1]} +"%F %T")
      expire_time=$(letsencrypt_format_timediff $(( ${appExpiry[1]} - $(date +%s) )) );
      dokku_col_log_msg "${appExpiry[0]}" "${expire_date}" "${expire_time}"
    done


    ;;

  help)
    HELP=$(cat<<EOF
    letsencrypt <app>, Enable or renew letsencrypt for app
    letsencrypt:email <app>, Get e-mail address used as letsencrypt contact
    letsencrypt:email <app> <e-mail>, Set e-mail address used as letsencrypt contact
    letsencrypt:revoke <app>, Revoke letsencrypt certificate for app
    letsencrypt:server <app>, Get selected letsencrypt server for app
    letsencrypt:server <app> <server>, Select a letsencrypt server for app (server can be 'default' 'staging' or a URL)
    letsencrypt:ls, List letsencrypt-secured apps with certificate expiry times
EOF
)
    if [[ -n $DOKKU_API_VERSION ]]; then
      echo "$HELP"
    else
      cat && echo "$HELP"
    fi
    ;;

  *)
    exit "$DOKKU_NOT_IMPLEMENTED_EXIT"
    ;;

esac
